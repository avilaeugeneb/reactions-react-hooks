{"version":3,"sources":["state/types.js","state/reducer.js","state/actions.js","context.js","components/hooks.js","components/PublishMessage.js","helpers/listeners.js","components/CreateReaction.js","components/MessageReactions.js","components/MessageBoard.js","components/SetUsername.js","components/App.js","pubsub.js","constants/channels.js","index.js"],"names":["REACTION_OBJECTS","type","emoji","initialState","messages","username","reactionsMap","REACTION_TYPES","map","react","reducer","state","action","includes","messageId","item","messageReactions","Object","objectSpread","defineProperty","concat","toConsumableArray","setUsername","createReaction","_ref2","id","uuid","timestamp","moment","valueOf","createContext","useAppContext","useContext","Context","PublishMessage","_useAppContext","publish","pubsub","_useState","useState","_useState2","slicedToArray","text","setText","publishMessage","trim","_ref","newMessage","react_default","a","createElement","value","onChange","e","target","onKeyPress","event","_ref$proceed","proceed","key","doActionOnEnterKey","onClick","CreateReaction","className","_ref3","publishReaction","MessageReactions","index","length","MessageBoard","_useAppContext$state","message","format","components_CreateReaction","components_MessageReactions","SetUsername","dispatch","PubSub","channels","_this","this","classCallCheck","addListener","listenerConfig","pubnub","channel","arguments","undefined","subscribe","PubNub","pubnubConfig","App","_useReducer","useReducer","_useReducer2","console","log","useEffect","messageObj","context","Provider","components_SetUsername","components_PublishMessage","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.1ce293e0.chunk.js","sourcesContent":["export const NEW_MESSAGE = 'NEW_MESSAGE'\r\nexport const SET_USERNAME = 'SET_USERNAME'\r\n\r\nexport const REACTION_OBJECTS = [\r\n  {\r\n    type: 'REACTION_LOVE',\r\n    emoji: '❤️'\r\n  },\r\n  {\r\n    type: 'REACTION_LIKE',\r\n    emoji: '👍'\r\n  },\r\n  {\r\n    type: 'REACTION_DISLIKE',\r\n    emoji: '👎'\r\n  },\r\n  {\r\n    type: 'REACTION_LAUGH',\r\n    emoji: '😂'\r\n  }\r\n]\r\n","import { NEW_MESSAGE, SET_USERNAME, REACTION_OBJECTS } from './types'\r\n\r\nexport const initialState = {\r\n  messages: [],\r\n  username: 'anonymous',\r\n  reactionsMap: {}\r\n}\r\n\r\nconst REACTION_TYPES = REACTION_OBJECTS.map(react => react.type)\r\n\r\nconst reducer = (state, action) => {\r\n  if (REACTION_TYPES.includes(action.type)) {\r\n    const { messageId } = action.item\r\n    const messageReactions = state.reactionsMap[messageId]\r\n    const reactionsMap = {\r\n      ...state.reactionsMap,\r\n      [messageId]: messageReactions ? [...messageReactions, action.item] : [action.item]\r\n    }\r\n\r\n    return { ...state, reactionsMap }\r\n  }\r\n  switch (action.type) {\r\n    case NEW_MESSAGE:\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, action.item]\r\n      }\r\n    case SET_USERNAME:\r\n      return {\r\n        ...state,\r\n        username: action.username\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer\r\n","import { NEW_MESSAGE, SET_USERNAME } from './types'\r\nimport uuid from 'uuid/v4'\r\nimport moment from 'moment'\r\n\r\nexport const newMessage = ({ text, username }) => ({\r\n  type: NEW_MESSAGE,\r\n  item: { id: uuid(), text, timestamp: moment().valueOf(), username }\r\n})\r\n\r\nexport const setUsername = username => ({\r\n  type: SET_USERNAME,\r\n  username\r\n})\r\n\r\nexport const createReaction = ({ type, emoji, username, messageId }) => ({\r\n  type,\r\n  item: { id: uuid(), timestamp: moment().valueOf(), emoji, username, messageId }\r\n})\r\n","import { createContext } from 'react'\r\n\r\nexport default createContext()\r\n","import { useContext } from 'react'\r\nimport Context from '../context'\r\n\r\nexport const useAppContext = () => {\r\n  return useContext(Context)\r\n}\r\n","import React, { useState } from 'react'\r\nimport { newMessage } from '../state/actions'\r\nimport { doActionOnEnterKey } from '../helpers/listeners'\r\nimport { useAppContext } from './hooks'\r\n\r\nconst PublishMessage = () => {\r\n  const { pubsub: { publish }, state: { username } } = useAppContext()\r\n  const [text, setText] = useState('')\r\n\r\n  const updateText = e => {\r\n    setText(e.target.value)\r\n  }\r\n\r\n  const publishMessage = () => {\r\n    if (text.trim()) publish(newMessage({ text, username }))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>Got something to say?</h3>\r\n      <input\r\n        value={text} onChange={updateText}\r\n        onKeyPress={event => doActionOnEnterKey({ event, proceed: text.trim(), action: publishMessage })}\r\n      />\r\n      {' '}\r\n      <button onClick={publishMessage}>Publish it!</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PublishMessage\r\n","export const doActionOnEnterKey = ({ event, action, proceed = true }) => {\r\n  if (event.key === 'Enter' && proceed) {\r\n    action()\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { REACTION_OBJECTS } from '../state/types'\r\nimport { useAppContext } from './hooks'\r\nimport { createReaction } from '../state/actions'\r\n\r\nfunction CreateReaction ({ messageId }) {\r\n  const { state: { username }, pubsub: { publish } } = useAppContext()\r\n\r\n  const publishReaction = ({ type, emoji }) => {\r\n    publish(createReaction({ type, emoji, username, messageId }))\r\n  }\r\n\r\n  return (\r\n    <div className='CreateReaction'>\r\n      {\r\n        REACTION_OBJECTS.map(({ type, emoji }) => (\r\n          <span key={type} onClick={() => publishReaction({ type, emoji })}>\r\n            {emoji}\r\n          </span>\r\n        ))\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CreateReaction\r\n","import React from 'react'\r\n\r\nfunction MessageReactions ({ messageReactions }) {\r\n  if (!messageReactions) return null\r\n\r\n  return (\r\n    messageReactions.map(({ id, emoji, username }, index) => (\r\n      <span key={id}>\r\n        <em>{username}:</em>\r\n        {emoji}\r\n        {index !== messageReactions.length - 1 ? ', ' : null}\r\n      </span>\r\n    ))\r\n  )\r\n}\r\n\r\nexport default MessageReactions\r\n","import React from 'react'\r\nimport moment from 'moment'\r\nimport { useAppContext } from './hooks'\r\nimport CreateReaction from './CreateReaction'\r\nimport MessageReactions from './MessageReactions'\r\n\r\nexport default function MessageBoard () {\r\n  const { state: { messages, reactionsMap } } = useAppContext()\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        messages.map(message => {\r\n          const { id, text, timestamp, username } = message\r\n\r\n          return (\r\n            <div key={id}>\r\n              <h4>{moment(timestamp).format('LLL')}</h4>\r\n              <p>{text}</p>\r\n              <h4>- {username}</h4>\r\n              <CreateReaction messageId={id} />\r\n              <MessageReactions messageReactions={reactionsMap[id]} />\r\n              <hr />\r\n            </div>\r\n          )\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useAppContext } from './hooks'\r\nimport { setUsername } from '../state/actions'\r\n\r\nfunction SetUsername () {\r\n  const { state: { username }, dispatch } = useAppContext()\r\n\r\n  const updateUsername = e => {\r\n    dispatch(setUsername(e.target.value))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>Username</h3>\r\n      <input onChange={updateUsername} value={username} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SetUsername\r\n","import React, { useReducer, useEffect } from 'react'\nimport reducer, { initialState } from '../state/reducer'\n\nimport PubSub from '../pubsub'\n\nimport PublishMessage from './PublishMessage'\nimport MessageBoard from './MessageBoard'\nimport SetUsername from './SetUsername'\n\nimport Context from '../context'\nimport { MESSAGE_CHANNEL } from '../constants/channels'\n\nconst pubsub = new PubSub([MESSAGE_CHANNEL])\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  console.log('STATE', state)\n\n  useEffect(() => {\n    pubsub.addListener({\n      message: messageObj => {\n        const { channel, message } = messageObj\n\n        console.log('Received a message', message)\n        console.log('from channel:', channel)\n\n        dispatch(message)\n      }\n    })\n  }, [])\n\n  return (\n    <Context.Provider value={{ state, dispatch, pubsub }}>\n      <h2>Reaction</h2>\n      <SetUsername />\n      <hr />\n      <PublishMessage />\n      <hr />\n      <MessageBoard />\n    </Context.Provider>\n  )\n}\n\nexport default App\n","import PubNub from 'pubnub'\r\nimport pubnubConfig from './pubnub.config'\r\nimport { MESSAGE_CHANNEL } from './constants/channels'\r\n\r\nexport default class PubSub {\r\n  constructor (channels) {\r\n    this.pubnub = new PubNub(pubnubConfig)\r\n    this.subscribe(channels)\r\n  }\r\n  addListener = listenerConfig => this.pubnub.addListener(listenerConfig)\r\n\r\n  publish = (message, channel=MESSAGE_CHANNEL) => this.pubnub.publish({ message, channel })\r\n\r\n  subscribe = channels => {\r\n    // console.log('SUBSCRIBED TO', channels.join(', '))\r\n    this.pubnub.subscribe({ channels })\r\n  }\r\n}\r\n","export const MESSAGE_CHANNEL = 'MESSAGE_CHANNEL'\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}